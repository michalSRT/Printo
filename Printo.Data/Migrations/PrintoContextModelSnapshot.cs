// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Printo.Data.Data;

namespace Printo.Data.Migrations
{
    [DbContext(typeof(PrintoContext))]
    partial class PrintoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Printo.Data.Data.Client", b =>
                {
                    b.Property<int>("ClientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AddedUserID")
                        .HasColumnType("int");

                    b.Property<string>("AppartmentNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NIP")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedUserID")
                        .HasColumnType("int");

                    b.HasKey("ClientID");

                    b.HasIndex("AddedUserID");

                    b.HasIndex("UpdatedUserID");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            ClientID = 1,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 893, DateTimeKind.Local).AddTicks(6263),
                            AddedUserID = 1,
                            City = "Nowy Sącz",
                            CompanyFullName = "PPHU Duet Piotr Bęben",
                            Email = "jd@gmail.com",
                            HouseNumber = "218b",
                            IsActive = true,
                            NIP = "1234567890",
                            Name = "Duet",
                            Phone = "666666666",
                            PostalCode = "33-300",
                            Street = "Lwowska"
                        },
                        new
                        {
                            ClientID = 2,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 896, DateTimeKind.Local).AddTicks(108),
                            AddedUserID = 1,
                            City = "Nowy Jork",
                            CompanyFullName = "Fakro Sp. z o.o.",
                            Email = "mikeshinoda@gmail.com",
                            HouseNumber = "52669",
                            IsActive = true,
                            NIP = "1234567890",
                            Name = "Fakro",
                            Phone = "555777333",
                            PostalCode = "52-300",
                            Street = "Wallstreet"
                        },
                        new
                        {
                            ClientID = 3,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 896, DateTimeKind.Local).AddTicks(142),
                            AddedUserID = 1,
                            City = "Nowy Sącz",
                            CompanyFullName = "Vitberg Jacek Sikora",
                            Email = "js@gmail.com",
                            HouseNumber = "3",
                            IsActive = true,
                            NIP = "1234567890",
                            Name = "Vitberg",
                            Phone = "666666666",
                            PostalCode = "33-300",
                            Street = "Borelowskiego"
                        });
                });

            modelBuilder.Entity("Printo.Data.Data.DeliveryType", b =>
                {
                    b.Property<int>("DeliveryTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AddedUserID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedUserID")
                        .HasColumnType("int");

                    b.HasKey("DeliveryTypeID");

                    b.HasIndex("AddedUserID");

                    b.HasIndex("UpdatedUserID");

                    b.ToTable("DeliveryTypes");

                    b.HasData(
                        new
                        {
                            DeliveryTypeID = 1,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 897, DateTimeKind.Local).AddTicks(9825),
                            AddedUserID = 1,
                            Description = "Odbiór osobisty przez klienta",
                            IsActive = true,
                            Name = "Odbiór osobisty"
                        },
                        new
                        {
                            DeliveryTypeID = 2,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 898, DateTimeKind.Local).AddTicks(479),
                            AddedUserID = 1,
                            Description = "Dostawa do klienta",
                            IsActive = true,
                            Name = "Dostawa"
                        },
                        new
                        {
                            DeliveryTypeID = 3,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 898, DateTimeKind.Local).AddTicks(491),
                            AddedUserID = 1,
                            Description = "Wysyłka kurierska",
                            IsActive = true,
                            Name = "Wysyłka"
                        },
                        new
                        {
                            DeliveryTypeID = 4,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 898, DateTimeKind.Local).AddTicks(494),
                            AddedUserID = 1,
                            Description = "Wysyłka kurieska z opcją za pobraniem",
                            IsActive = true,
                            Name = "Wysyłka za pobraniem"
                        });
                });

            modelBuilder.Entity("Printo.Data.Data.Event", b =>
                {
                    b.Property<int>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllDay")
                        .HasColumnType("bit");

                    b.Property<string>("BackgroundColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrderID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventID");

                    b.HasIndex("OrderID");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Printo.Data.Data.Finishing", b =>
                {
                    b.Property<int>("FinishingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AddedUserID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedUserID")
                        .HasColumnType("int");

                    b.HasKey("FinishingID");

                    b.HasIndex("AddedUserID");

                    b.HasIndex("UpdatedUserID");

                    b.ToTable("Finishings");

                    b.HasData(
                        new
                        {
                            FinishingID = 1,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 898, DateTimeKind.Local).AddTicks(2133),
                            AddedUserID = 1,
                            Description = "Brak uszlachetnień druku",
                            IsActive = true,
                            Name = "Brak"
                        },
                        new
                        {
                            FinishingID = 2,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 898, DateTimeKind.Local).AddTicks(2772),
                            AddedUserID = 1,
                            Description = "Folia błysk jednostronnie na awersie",
                            IsActive = true,
                            Name = "1/0 Folia BŁYSK"
                        },
                        new
                        {
                            FinishingID = 3,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 898, DateTimeKind.Local).AddTicks(2784),
                            AddedUserID = 1,
                            Description = "Folia mat jednostronnie na awersie",
                            IsActive = true,
                            Name = "1/0 Folia MAT"
                        },
                        new
                        {
                            FinishingID = 4,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 898, DateTimeKind.Local).AddTicks(2787),
                            AddedUserID = 1,
                            Description = "Folia soft-touch jednostronnie na awersie",
                            IsActive = true,
                            Name = "1/0 Folia SOFT"
                        },
                        new
                        {
                            FinishingID = 5,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 898, DateTimeKind.Local).AddTicks(2790),
                            AddedUserID = 1,
                            Description = "Folia błysk obustronnie",
                            IsActive = true,
                            Name = "1/1 Folia BŁYSK"
                        },
                        new
                        {
                            FinishingID = 6,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 898, DateTimeKind.Local).AddTicks(2793),
                            AddedUserID = 1,
                            Description = "Folia mat obustronnie",
                            IsActive = true,
                            Name = "1/1 Folia MAT"
                        },
                        new
                        {
                            FinishingID = 7,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 898, DateTimeKind.Local).AddTicks(2796),
                            AddedUserID = 1,
                            Description = "Folia soft-touch obustronnie",
                            IsActive = true,
                            Name = "1/1 Folia SOFT"
                        },
                        new
                        {
                            FinishingID = 8,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 898, DateTimeKind.Local).AddTicks(2799),
                            AddedUserID = 1,
                            Description = "Folia mat jednostronnie i lakier wybiórczo błysk na awersie",
                            IsActive = true,
                            Name = "1/0 Folia MAT + UV wybiórczo"
                        });
                });

            modelBuilder.Entity("Printo.Data.Data.Format", b =>
                {
                    b.Property<int>("FormatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AddedUserID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedUserID")
                        .HasColumnType("int");

                    b.HasKey("FormatID");

                    b.HasIndex("AddedUserID");

                    b.HasIndex("UpdatedUserID");

                    b.ToTable("Formats");

                    b.HasData(
                        new
                        {
                            FormatID = 1,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 898, DateTimeKind.Local).AddTicks(4552),
                            AddedUserID = 1,
                            Description = "Wymiary w uwagach do druku",
                            IsActive = true,
                            Name = "Inny"
                        },
                        new
                        {
                            FormatID = 2,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 898, DateTimeKind.Local).AddTicks(5190),
                            AddedUserID = 1,
                            Description = "440x630mm",
                            IsActive = true,
                            Name = "A2+"
                        },
                        new
                        {
                            FormatID = 3,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 898, DateTimeKind.Local).AddTicks(5202),
                            AddedUserID = 1,
                            Description = "420x610mm",
                            IsActive = true,
                            Name = "A2"
                        },
                        new
                        {
                            FormatID = 4,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 898, DateTimeKind.Local).AddTicks(5208),
                            AddedUserID = 1,
                            Description = "297x420mm",
                            IsActive = true,
                            Name = "A3"
                        },
                        new
                        {
                            FormatID = 5,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 898, DateTimeKind.Local).AddTicks(5211),
                            AddedUserID = 1,
                            Description = "210x297mm",
                            IsActive = true,
                            Name = "A4"
                        },
                        new
                        {
                            FormatID = 6,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 898, DateTimeKind.Local).AddTicks(5215),
                            AddedUserID = 1,
                            Description = "148x210mm",
                            IsActive = true,
                            Name = "A5"
                        });
                });

            modelBuilder.Entity("Printo.Data.Data.Machine", b =>
                {
                    b.Property<int>("MachineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AddedUserID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedUserID")
                        .HasColumnType("int");

                    b.HasKey("MachineID");

                    b.HasIndex("AddedUserID");

                    b.HasIndex("UpdatedUserID");

                    b.ToTable("Machines");

                    b.HasData(
                        new
                        {
                            MachineID = 1,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 898, DateTimeKind.Local).AddTicks(6853),
                            AddedUserID = 1,
                            Description = "Nie dotyczy",
                            IsActive = true,
                            Name = "N/D"
                        },
                        new
                        {
                            MachineID = 2,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 898, DateTimeKind.Local).AddTicks(7493),
                            AddedUserID = 1,
                            Description = "Druk offsetowy KBA RAPIDA 75",
                            IsActive = true,
                            Name = "KBA"
                        },
                        new
                        {
                            MachineID = 3,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 898, DateTimeKind.Local).AddTicks(7504),
                            AddedUserID = 1,
                            Description = "Druk offsetowy RYOBI",
                            IsActive = true,
                            Name = "RYOBI"
                        },
                        new
                        {
                            MachineID = 4,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 898, DateTimeKind.Local).AddTicks(7507),
                            AddedUserID = 1,
                            Description = "Druk cyfrowy XEROX D700",
                            IsActive = true,
                            Name = "XEROX"
                        });
                });

            modelBuilder.Entity("Printo.Data.Data.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AddedUserID")
                        .HasColumnType("int");

                    b.Property<int?>("ClientID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DeliveryTypeID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FinishingID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("FormatID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReprint")
                        .HasColumnType("bit");

                    b.Property<int?>("MachineID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("NetPrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaperTypeID")
                        .HasColumnType("int");

                    b.Property<int>("PaperWeightID")
                        .HasColumnType("int");

                    b.Property<string>("PaymentDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaymentTypeID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("PostPressID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("PrintColorID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PrintDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PrintUserID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductionStageID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Quantity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SheetSizeID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("SheetsNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SheetsNumberPrinted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedUserID")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.Property<int?>("VatRateID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("OrderID");

                    b.HasIndex("AddedUserID");

                    b.HasIndex("ClientID");

                    b.HasIndex("DeliveryTypeID");

                    b.HasIndex("FinishingID");

                    b.HasIndex("FormatID");

                    b.HasIndex("MachineID");

                    b.HasIndex("PaperTypeID");

                    b.HasIndex("PaperWeightID");

                    b.HasIndex("PaymentTypeID");

                    b.HasIndex("PostPressID");

                    b.HasIndex("PrintColorID");

                    b.HasIndex("PrintUserID");

                    b.HasIndex("ProductID");

                    b.HasIndex("ProductionStageID");

                    b.HasIndex("SheetSizeID");

                    b.HasIndex("UpdatedUserID");

                    b.HasIndex("UserID");

                    b.HasIndex("VatRateID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Printo.Data.Data.PaperType", b =>
                {
                    b.Property<int>("PaperTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AddedUserID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedUserID")
                        .HasColumnType("int");

                    b.HasKey("PaperTypeID");

                    b.HasIndex("AddedUserID");

                    b.HasIndex("UpdatedUserID");

                    b.ToTable("PaperTypes");

                    b.HasData(
                        new
                        {
                            PaperTypeID = 1,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 898, DateTimeKind.Local).AddTicks(9149),
                            AddedUserID = 1,
                            Description = "Szczegóły w uwagach do druku",
                            IsActive = true,
                            Name = "Inny"
                        },
                        new
                        {
                            PaperTypeID = 2,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 898, DateTimeKind.Local).AddTicks(9786),
                            AddedUserID = 1,
                            Description = "Papier powlekany matowy",
                            IsActive = true,
                            Name = "Kreda mat"
                        },
                        new
                        {
                            PaperTypeID = 3,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 898, DateTimeKind.Local).AddTicks(9797),
                            AddedUserID = 1,
                            Description = "Papier powlekany błyszczący",
                            IsActive = true,
                            Name = "Kreda błysk"
                        },
                        new
                        {
                            PaperTypeID = 4,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 898, DateTimeKind.Local).AddTicks(9800),
                            AddedUserID = 1,
                            Description = "Papier niepowlekany typu offset",
                            IsActive = true,
                            Name = "Offset"
                        });
                });

            modelBuilder.Entity("Printo.Data.Data.PaperWeight", b =>
                {
                    b.Property<int>("PaperWeightID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AddedUserID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grammature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedUserID")
                        .HasColumnType("int");

                    b.HasKey("PaperWeightID");

                    b.HasIndex("AddedUserID");

                    b.HasIndex("UpdatedUserID");

                    b.ToTable("PaperWeights");

                    b.HasData(
                        new
                        {
                            PaperWeightID = 1,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 899, DateTimeKind.Local).AddTicks(1448),
                            AddedUserID = 1,
                            Description = "Szczegóły w opisie druku",
                            Grammature = "Inna",
                            IsActive = true
                        },
                        new
                        {
                            PaperWeightID = 2,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 899, DateTimeKind.Local).AddTicks(2143),
                            AddedUserID = 1,
                            Description = "",
                            Grammature = "130g",
                            IsActive = true
                        },
                        new
                        {
                            PaperWeightID = 3,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 899, DateTimeKind.Local).AddTicks(2155),
                            AddedUserID = 1,
                            Description = "",
                            Grammature = "170g",
                            IsActive = true
                        },
                        new
                        {
                            PaperWeightID = 4,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 899, DateTimeKind.Local).AddTicks(2158),
                            AddedUserID = 1,
                            Description = "",
                            Grammature = "200g",
                            IsActive = true
                        },
                        new
                        {
                            PaperWeightID = 5,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 899, DateTimeKind.Local).AddTicks(2161),
                            AddedUserID = 1,
                            Description = "",
                            Grammature = "350g + 170g",
                            IsActive = true
                        },
                        new
                        {
                            PaperWeightID = 6,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 899, DateTimeKind.Local).AddTicks(2164),
                            AddedUserID = 1,
                            Description = "",
                            Grammature = "250g + 130g",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Printo.Data.Data.PaymentType", b =>
                {
                    b.Property<int>("PaymentTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AddedUserID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedUserID")
                        .HasColumnType("int");

                    b.HasKey("PaymentTypeID");

                    b.HasIndex("AddedUserID");

                    b.HasIndex("UpdatedUserID");

                    b.ToTable("PaymentTypes");

                    b.HasData(
                        new
                        {
                            PaymentTypeID = 1,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 899, DateTimeKind.Local).AddTicks(3860),
                            AddedUserID = 1,
                            Description = "Przelew bankowy termin min. 14 dni",
                            IsActive = true,
                            Name = "Przelew"
                        },
                        new
                        {
                            PaymentTypeID = 2,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 899, DateTimeKind.Local).AddTicks(4503),
                            AddedUserID = 1,
                            Description = "Gotówka przy odbiorze",
                            IsActive = true,
                            Name = "Gotówka"
                        });
                });

            modelBuilder.Entity("Printo.Data.Data.PostPress", b =>
                {
                    b.Property<int>("PostPressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AddedUserID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedUserID")
                        .HasColumnType("int");

                    b.HasKey("PostPressID");

                    b.HasIndex("AddedUserID");

                    b.HasIndex("UpdatedUserID");

                    b.ToTable("PostPresses");

                    b.HasData(
                        new
                        {
                            PostPressID = 1,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 899, DateTimeKind.Local).AddTicks(6138),
                            AddedUserID = 1,
                            Description = "Brak obróbki introligatorskiej",
                            IsActive = true,
                            Name = "Brak"
                        },
                        new
                        {
                            PostPressID = 2,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 899, DateTimeKind.Local).AddTicks(6780),
                            AddedUserID = 1,
                            Description = "Docięcie do formatu",
                            IsActive = true,
                            Name = "Docięcie"
                        },
                        new
                        {
                            PostPressID = 3,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 899, DateTimeKind.Local).AddTicks(6791),
                            AddedUserID = 1,
                            Description = "2 zszywki płaskie",
                            IsActive = true,
                            Name = "Oprawa zeszytowa"
                        },
                        new
                        {
                            PostPressID = 4,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 899, DateTimeKind.Local).AddTicks(6795),
                            AddedUserID = 1,
                            Description = "Oprawa miękka klejona",
                            IsActive = true,
                            Name = "Oprawa klejona"
                        },
                        new
                        {
                            PostPressID = 5,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 899, DateTimeKind.Local).AddTicks(6797),
                            AddedUserID = 1,
                            Description = "Składanie do formatu",
                            IsActive = true,
                            Name = "Falcowanie"
                        },
                        new
                        {
                            PostPressID = 6,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 899, DateTimeKind.Local).AddTicks(6800),
                            AddedUserID = 1,
                            Description = "Szczgóły w opisie do zamówienia",
                            IsActive = true,
                            Name = "Inna obróbka"
                        });
                });

            modelBuilder.Entity("Printo.Data.Data.PrintColor", b =>
                {
                    b.Property<int>("PrintColorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AddedUserID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedUserID")
                        .HasColumnType("int");

                    b.HasKey("PrintColorID");

                    b.HasIndex("AddedUserID");

                    b.HasIndex("UpdatedUserID");

                    b.ToTable("PrintColors");

                    b.HasData(
                        new
                        {
                            PrintColorID = 1,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 899, DateTimeKind.Local).AddTicks(8430),
                            AddedUserID = 1,
                            Description = "Nie dotyczy",
                            IsActive = true,
                            Name = "N/D"
                        },
                        new
                        {
                            PrintColorID = 2,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 899, DateTimeKind.Local).AddTicks(9072),
                            AddedUserID = 1,
                            Description = "CMYK jednostronnie",
                            IsActive = true,
                            Name = "4/0 CMYK"
                        },
                        new
                        {
                            PrintColorID = 3,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 899, DateTimeKind.Local).AddTicks(9084),
                            AddedUserID = 1,
                            Description = "CMYK obustronnie",
                            IsActive = true,
                            Name = "4/4 CMYK"
                        },
                        new
                        {
                            PrintColorID = 4,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 899, DateTimeKind.Local).AddTicks(9089),
                            AddedUserID = 1,
                            Description = "Czarny jednostronnie",
                            IsActive = true,
                            Name = "1/0 blacK"
                        },
                        new
                        {
                            PrintColorID = 5,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 899, DateTimeKind.Local).AddTicks(9093),
                            AddedUserID = 1,
                            Description = "Czarny obustronnie",
                            IsActive = true,
                            Name = "1/1 blacK"
                        },
                        new
                        {
                            PrintColorID = 6,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 899, DateTimeKind.Local).AddTicks(9096),
                            AddedUserID = 1,
                            Description = "Okładka: CMYK obustronnie + Środek: czarny obustronnie",
                            IsActive = true,
                            Name = "4/4 CMYK + 1/1 blacK"
                        },
                        new
                        {
                            PrintColorID = 7,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 899, DateTimeKind.Local).AddTicks(9099),
                            AddedUserID = 1,
                            Description = "Pantone jednostronnie",
                            IsActive = true,
                            Name = "1/0 Pantone"
                        },
                        new
                        {
                            PrintColorID = 8,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 899, DateTimeKind.Local).AddTicks(9102),
                            AddedUserID = 1,
                            Description = "Szczegóły w uwagach do druku",
                            IsActive = true,
                            Name = "Inny"
                        });
                });

            modelBuilder.Entity("Printo.Data.Data.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AddedUserID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedUserID")
                        .HasColumnType("int");

                    b.HasKey("ProductID");

                    b.HasIndex("AddedUserID");

                    b.HasIndex("UpdatedUserID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductID = 1,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 900, DateTimeKind.Local).AddTicks(3417),
                            AddedUserID = 1,
                            Description = "Szczegóły w opisie zamówienia",
                            IsActive = true,
                            Name = "Inny"
                        },
                        new
                        {
                            ProductID = 2,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 900, DateTimeKind.Local).AddTicks(4061),
                            AddedUserID = 1,
                            Description = "Arkusze bez obróbki introligatorskiej",
                            IsActive = true,
                            Name = "Arkusz plano"
                        },
                        new
                        {
                            ProductID = 3,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 900, DateTimeKind.Local).AddTicks(4111),
                            AddedUserID = 1,
                            Description = "Ulotka standardowa cięta do formatu",
                            IsActive = true,
                            Name = "Ulotka standardowa"
                        },
                        new
                        {
                            ProductID = 4,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 900, DateTimeKind.Local).AddTicks(4115),
                            AddedUserID = 1,
                            Description = "Plakat standardowy cięty do formatu",
                            IsActive = true,
                            Name = "Plakat"
                        },
                        new
                        {
                            ProductID = 5,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 900, DateTimeKind.Local).AddTicks(4118),
                            AddedUserID = 1,
                            Description = "Szycie zeszytowe standrd lub oczkowe",
                            IsActive = true,
                            Name = "Katalog szyty"
                        },
                        new
                        {
                            ProductID = 6,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 900, DateTimeKind.Local).AddTicks(4121),
                            AddedUserID = 1,
                            Description = "Oprawa miękka klejona",
                            IsActive = true,
                            Name = "Katalog klejony"
                        });
                });

            modelBuilder.Entity("Printo.Data.Data.ProductionStage", b =>
                {
                    b.Property<int>("ProductionStageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AddedUserID")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedUserID")
                        .HasColumnType("int");

                    b.HasKey("ProductionStageID");

                    b.HasIndex("AddedUserID");

                    b.HasIndex("UpdatedUserID");

                    b.ToTable("ProductionStages");

                    b.HasData(
                        new
                        {
                            ProductionStageID = 1,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 900, DateTimeKind.Local).AddTicks(1007),
                            AddedUserID = 1,
                            Color = "#ffffff",
                            Description = "Nowe zamówienie przyjęte do realizacji",
                            IsActive = true,
                            Name = "NOWE"
                        },
                        new
                        {
                            ProductionStageID = 2,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 900, DateTimeKind.Local).AddTicks(1730),
                            AddedUserID = 1,
                            Color = "#fdaa1c",
                            Description = "Naświetlanie CTP",
                            IsActive = true,
                            Name = "CTP"
                        },
                        new
                        {
                            ProductionStageID = 3,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 900, DateTimeKind.Local).AddTicks(1742),
                            AddedUserID = 1,
                            Color = "#00a8f0",
                            Description = "Etap drukowania",
                            IsActive = true,
                            Name = "DO DRUKU"
                        },
                        new
                        {
                            ProductionStageID = 4,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 900, DateTimeKind.Local).AddTicks(1745),
                            AddedUserID = 1,
                            Color = "#f62323",
                            Description = "Produkcja zatrzymana/anulowana",
                            IsActive = true,
                            Name = "STOP"
                        },
                        new
                        {
                            ProductionStageID = 5,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 900, DateTimeKind.Local).AddTicks(1748),
                            AddedUserID = 1,
                            Color = "#1ae000",
                            Description = "Zamówienie po wydruku",
                            IsActive = true,
                            Name = "WYDRUKOWANE"
                        },
                        new
                        {
                            ProductionStageID = 6,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 900, DateTimeKind.Local).AddTicks(1751),
                            AddedUserID = 1,
                            Color = "#7400b8",
                            Description = "Obróbka introligatorska i uszlachetnienia",
                            IsActive = true,
                            Name = "INTRO"
                        },
                        new
                        {
                            ProductionStageID = 7,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 900, DateTimeKind.Local).AddTicks(1754),
                            AddedUserID = 1,
                            Color = "#000000",
                            Description = "Produkcja zakończona - zamówienie gotowe do wydania",
                            IsActive = true,
                            Name = "GOTOWE"
                        },
                        new
                        {
                            ProductionStageID = 8,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 900, DateTimeKind.Local).AddTicks(1757),
                            AddedUserID = 1,
                            Color = "#ffffff",
                            Description = "Zamówienie zrealizowane",
                            IsActive = true,
                            Name = "KONIEC"
                        });
                });

            modelBuilder.Entity("Printo.Data.Data.SheetSize", b =>
                {
                    b.Property<int>("SheetSizeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AddedUserID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedUserID")
                        .HasColumnType("int");

                    b.HasKey("SheetSizeID");

                    b.HasIndex("AddedUserID");

                    b.HasIndex("UpdatedUserID");

                    b.ToTable("SheetSizes");

                    b.HasData(
                        new
                        {
                            SheetSizeID = 1,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 900, DateTimeKind.Local).AddTicks(5764),
                            AddedUserID = 1,
                            Description = "Nie dotyczy",
                            IsActive = true,
                            Name = "N/D"
                        },
                        new
                        {
                            SheetSizeID = 2,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 900, DateTimeKind.Local).AddTicks(6444),
                            AddedUserID = 1,
                            Description = "630x440mm",
                            IsActive = true,
                            Name = "A2+"
                        },
                        new
                        {
                            SheetSizeID = 3,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 900, DateTimeKind.Local).AddTicks(6455),
                            AddedUserID = 1,
                            Description = "610x430mm",
                            IsActive = true,
                            Name = "A2"
                        },
                        new
                        {
                            SheetSizeID = 4,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 900, DateTimeKind.Local).AddTicks(6458),
                            AddedUserID = 1,
                            Description = "440x315mm",
                            IsActive = true,
                            Name = "A3+"
                        },
                        new
                        {
                            SheetSizeID = 5,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 900, DateTimeKind.Local).AddTicks(6461),
                            AddedUserID = 1,
                            Description = "700x500mm",
                            IsActive = true,
                            Name = "B2"
                        },
                        new
                        {
                            SheetSizeID = 6,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 900, DateTimeKind.Local).AddTicks(6464),
                            AddedUserID = 1,
                            Description = "500x350mm",
                            IsActive = true,
                            Name = "B3"
                        },
                        new
                        {
                            SheetSizeID = 7,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 900, DateTimeKind.Local).AddTicks(6467),
                            AddedUserID = 1,
                            Description = "Szczegóły w uwagach do druku",
                            IsActive = true,
                            Name = "Inny"
                        });
                });

            modelBuilder.Entity("Printo.Data.Data.ToDo", b =>
                {
                    b.Property<int>("ToDoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AddedUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedUserID")
                        .HasColumnType("int");

                    b.HasKey("ToDoID");

                    b.HasIndex("AddedUserID");

                    b.HasIndex("UpdatedUserID");

                    b.ToTable("ToDos");

                    b.HasData(
                        new
                        {
                            ToDoID = 1,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 900, DateTimeKind.Local).AddTicks(8582),
                            AddedUserID = 1,
                            Date = new DateTime(2020, 11, 22, 15, 25, 39, 900, DateTimeKind.Local).AddTicks(7821),
                            Description = "Zamówić 2 ryzy papieru",
                            IsActive = true,
                            Name = "Przykładowa notatka"
                        });
                });

            modelBuilder.Entity("Printo.Data.Data.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserTypeID")
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.HasIndex("UserTypeID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 897, DateTimeKind.Local).AddTicks(3002),
                            IsActive = true,
                            Login = "admin",
                            Name = "Admin",
                            Password = "21232f297a57a5a743894a0e4a801fc3",
                            UserTypeID = 1
                        });
                });

            modelBuilder.Entity("Printo.Data.Data.UserType", b =>
                {
                    b.Property<int>("UserTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserTypeID");

                    b.ToTable("UserTypes");

                    b.HasData(
                        new
                        {
                            UserTypeID = 1,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 897, DateTimeKind.Local).AddTicks(5370),
                            Description = "Administrator systemu",
                            IsActive = true,
                            Name = "Admin"
                        },
                        new
                        {
                            UserTypeID = 2,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 897, DateTimeKind.Local).AddTicks(5725),
                            Description = "Drukarz",
                            IsActive = true,
                            Name = "Drukarz"
                        },
                        new
                        {
                            UserTypeID = 3,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 897, DateTimeKind.Local).AddTicks(5735),
                            Description = "Pracownik",
                            IsActive = true,
                            Name = "Pracownik"
                        });
                });

            modelBuilder.Entity("Printo.Data.Data.VatRate", b =>
                {
                    b.Property<int>("VatRateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AddedUserID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedUserID")
                        .HasColumnType("int");

                    b.HasKey("VatRateID");

                    b.HasIndex("AddedUserID");

                    b.HasIndex("UpdatedUserID");

                    b.ToTable("VatRates");

                    b.HasData(
                        new
                        {
                            VatRateID = 1,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 897, DateTimeKind.Local).AddTicks(7814),
                            Description = "Standardowa stawka Vat",
                            IsActive = true,
                            Name = "23%",
                            Rate = 23
                        },
                        new
                        {
                            VatRateID = 2,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 897, DateTimeKind.Local).AddTicks(8153),
                            Description = "Stawka Vat przy numerze ISSN",
                            IsActive = true,
                            Name = "8%",
                            Rate = 8
                        },
                        new
                        {
                            VatRateID = 3,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 897, DateTimeKind.Local).AddTicks(8163),
                            Description = "Stawka Vat przy numerze ISBN",
                            IsActive = true,
                            Name = "5%",
                            Rate = 5
                        },
                        new
                        {
                            VatRateID = 5,
                            AddedDate = new DateTime(2020, 11, 22, 15, 25, 39, 897, DateTimeKind.Local).AddTicks(8166),
                            Description = "Nie dotyczy",
                            IsActive = true,
                            Name = "nd",
                            Rate = 0
                        });
                });

            modelBuilder.Entity("Printo.Data.Data.Client", b =>
                {
                    b.HasOne("Printo.Data.Data.User", "AddedUser")
                        .WithMany()
                        .HasForeignKey("AddedUserID");

                    b.HasOne("Printo.Data.Data.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserID");
                });

            modelBuilder.Entity("Printo.Data.Data.DeliveryType", b =>
                {
                    b.HasOne("Printo.Data.Data.User", "AddedUser")
                        .WithMany()
                        .HasForeignKey("AddedUserID");

                    b.HasOne("Printo.Data.Data.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserID");
                });

            modelBuilder.Entity("Printo.Data.Data.Event", b =>
                {
                    b.HasOne("Printo.Data.Data.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID");
                });

            modelBuilder.Entity("Printo.Data.Data.Finishing", b =>
                {
                    b.HasOne("Printo.Data.Data.User", "AddedUser")
                        .WithMany()
                        .HasForeignKey("AddedUserID");

                    b.HasOne("Printo.Data.Data.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserID");
                });

            modelBuilder.Entity("Printo.Data.Data.Format", b =>
                {
                    b.HasOne("Printo.Data.Data.User", "AddedUser")
                        .WithMany()
                        .HasForeignKey("AddedUserID");

                    b.HasOne("Printo.Data.Data.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserID");
                });

            modelBuilder.Entity("Printo.Data.Data.Machine", b =>
                {
                    b.HasOne("Printo.Data.Data.User", "AddedUser")
                        .WithMany()
                        .HasForeignKey("AddedUserID");

                    b.HasOne("Printo.Data.Data.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserID");
                });

            modelBuilder.Entity("Printo.Data.Data.Order", b =>
                {
                    b.HasOne("Printo.Data.Data.User", "AddedUser")
                        .WithMany()
                        .HasForeignKey("AddedUserID");

                    b.HasOne("Printo.Data.Data.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Printo.Data.Data.DeliveryType", "DeliveryType")
                        .WithMany()
                        .HasForeignKey("DeliveryTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Printo.Data.Data.Finishing", "Finishing")
                        .WithMany()
                        .HasForeignKey("FinishingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Printo.Data.Data.Format", "Format")
                        .WithMany()
                        .HasForeignKey("FormatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Printo.Data.Data.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Printo.Data.Data.PaperType", "PaperType")
                        .WithMany()
                        .HasForeignKey("PaperTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Printo.Data.Data.PaperWeight", "PaperWeight")
                        .WithMany()
                        .HasForeignKey("PaperWeightID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Printo.Data.Data.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Printo.Data.Data.PostPress", "PostPress")
                        .WithMany()
                        .HasForeignKey("PostPressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Printo.Data.Data.PrintColor", "PrintColor")
                        .WithMany()
                        .HasForeignKey("PrintColorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Printo.Data.Data.User", "PrintUser")
                        .WithMany()
                        .HasForeignKey("PrintUserID");

                    b.HasOne("Printo.Data.Data.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Printo.Data.Data.ProductionStage", "ProductionStage")
                        .WithMany()
                        .HasForeignKey("ProductionStageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Printo.Data.Data.SheetSize", "SheetSize")
                        .WithMany()
                        .HasForeignKey("SheetSizeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Printo.Data.Data.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserID");

                    b.HasOne("Printo.Data.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.HasOne("Printo.Data.Data.VatRate", "VatRate")
                        .WithMany()
                        .HasForeignKey("VatRateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Printo.Data.Data.PaperType", b =>
                {
                    b.HasOne("Printo.Data.Data.User", "AddedUser")
                        .WithMany()
                        .HasForeignKey("AddedUserID");

                    b.HasOne("Printo.Data.Data.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserID");
                });

            modelBuilder.Entity("Printo.Data.Data.PaperWeight", b =>
                {
                    b.HasOne("Printo.Data.Data.User", "AddedUser")
                        .WithMany()
                        .HasForeignKey("AddedUserID");

                    b.HasOne("Printo.Data.Data.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserID");
                });

            modelBuilder.Entity("Printo.Data.Data.PaymentType", b =>
                {
                    b.HasOne("Printo.Data.Data.User", "AddedUser")
                        .WithMany()
                        .HasForeignKey("AddedUserID");

                    b.HasOne("Printo.Data.Data.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserID");
                });

            modelBuilder.Entity("Printo.Data.Data.PostPress", b =>
                {
                    b.HasOne("Printo.Data.Data.User", "AddedUser")
                        .WithMany()
                        .HasForeignKey("AddedUserID");

                    b.HasOne("Printo.Data.Data.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserID");
                });

            modelBuilder.Entity("Printo.Data.Data.PrintColor", b =>
                {
                    b.HasOne("Printo.Data.Data.User", "AddedUser")
                        .WithMany()
                        .HasForeignKey("AddedUserID");

                    b.HasOne("Printo.Data.Data.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserID");
                });

            modelBuilder.Entity("Printo.Data.Data.Product", b =>
                {
                    b.HasOne("Printo.Data.Data.User", "AddedUser")
                        .WithMany()
                        .HasForeignKey("AddedUserID");

                    b.HasOne("Printo.Data.Data.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserID");
                });

            modelBuilder.Entity("Printo.Data.Data.ProductionStage", b =>
                {
                    b.HasOne("Printo.Data.Data.User", "AddedUser")
                        .WithMany()
                        .HasForeignKey("AddedUserID");

                    b.HasOne("Printo.Data.Data.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserID");
                });

            modelBuilder.Entity("Printo.Data.Data.SheetSize", b =>
                {
                    b.HasOne("Printo.Data.Data.User", "AddedUser")
                        .WithMany()
                        .HasForeignKey("AddedUserID");

                    b.HasOne("Printo.Data.Data.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserID");
                });

            modelBuilder.Entity("Printo.Data.Data.ToDo", b =>
                {
                    b.HasOne("Printo.Data.Data.User", "AddedUser")
                        .WithMany()
                        .HasForeignKey("AddedUserID");

                    b.HasOne("Printo.Data.Data.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserID");
                });

            modelBuilder.Entity("Printo.Data.Data.User", b =>
                {
                    b.HasOne("Printo.Data.Data.UserType", "UserType")
                        .WithMany("Users")
                        .HasForeignKey("UserTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Printo.Data.Data.VatRate", b =>
                {
                    b.HasOne("Printo.Data.Data.User", "AddedUser")
                        .WithMany()
                        .HasForeignKey("AddedUserID");

                    b.HasOne("Printo.Data.Data.User", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserID");
                });
#pragma warning restore 612, 618
        }
    }
}
